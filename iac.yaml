AWSTemplateFormatVersion: "2010-09-09"
Description: "Infrastructure for Keynotes Application with Load Balancer, API Gateway, and VPC"

Parameters:
  CreateTaskLambdaZip:
    Type: String
    Description: "S3 path for createTask Lambda zip file (e.g., keynotes-files/createTask.zip)"
  ReadTaskLambdaZip:
    Type: String
    Description: "S3 path for readTask Lambda zip file (e.g., keynotes-files/readTask.zip)"
  UpdateTaskLambdaZip:
    Type: String
    Description: "S3 path for updateTask Lambda zip file (e.g., keynotes-files/updateTask.zip)"
  DeleteTaskLambdaZip:
    Type: String
    Description: "S3 path for deleteTask Lambda zip file (e.g., keynotes-files/deleteTask.zip)"

Resources:
  # VPC
  AppVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: AppVPC

  # Internet Gateway
  AppInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: AppInternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref AppVPC
      InternetGatewayId: !Ref AppInternetGateway

  # Public Route Table
  AppPublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref AppVPC
      Tags:
        - Key: Name
          Value: AppPublicRouteTable

  AppPublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref AppPublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref AppInternetGateway

  # Public Subnets
  AppPublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref AppVPC
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: us-east-1a
      Tags:
        - Key: Name
          Value: AppPublicSubnet1

  AppPublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref AppVPC
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: us-east-1b
      Tags:
        - Key: Name
          Value: AppPublicSubnet2

  SubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref AppPublicSubnet1
      RouteTableId: !Ref AppPublicRouteTable

  SubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref AppPublicSubnet2
      RouteTableId: !Ref AppPublicRouteTable

  # Security Group
  AppSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref AppVPC
      GroupDescription: "Allow HTTP traffic to EC2 instance and Load Balancer"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          CidrIp: 0.0.0.0/0

  # Application Load Balancer
  AppLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: KeynotesALB
      Scheme: internet-facing
      SecurityGroups:
        - !Ref AppSecurityGroup
      Subnets:
        - !Ref AppPublicSubnet1
        - !Ref AppPublicSubnet2

  # Target Group
  AppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: KeynotesTG
      Port: 3000
      Protocol: HTTP
      VpcId: !Ref AppVPC
      TargetType: instance

  # Listener
  AppLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref AppLoadBalancer
      Port: 3000
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref AppTargetGroup

  # EC2 Instance
  AppInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      SecurityGroupIds:
        - !Ref AppSecurityGroup
      SubnetId: !Ref AppPublicSubnet1
      ImageId: ami-0453ec754f44f9a4a
      KeyName: keynotes # Ensure this is your EC2 key pair name
      Tags:
        - Key: Name
          Value: Keynotes-App

  # Lambda Functions
  CreateTaskLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: createTask
      Handler: index.create_task_handler
      Role: arn:aws:iam::499652895534:role/LabRole
      Code:
        S3Bucket: keynotes-files
        S3Key: !Ref CreateTaskLambdaZip
      Runtime: python3.8

  ReadTaskLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: readTask
      Handler: index.read_task_handler
      Role: arn:aws:iam::499652895534:role/LabRole
      Code:
        S3Bucket: keynotes-files
        S3Key: !Ref ReadTaskLambdaZip
      Runtime: python3.8

  UpdateTaskLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: updateTask
      Handler: index.update_task_handler
      Role: arn:aws:iam::499652895534:role/LabRole
      Code:
        S3Bucket: keynotes-files
        S3Key: !Ref UpdateTaskLambdaZip
      Runtime: python3.8

  DeleteTaskLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: deleteTask
      Handler: index.delete_task_handler
      Role: arn:aws:iam::499652895534:role/LabRole
      Code:
        S3Bucket: keynotes-files
        S3Key: !Ref DeleteTaskLambdaZip
      Runtime: python3.8

  # API Gateway
  TaskAPIGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: "KeynotesAPIGateway"
      Description: "API Gateway for Keynotes Task Management"

  CreateTaskResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt TaskAPIGateway.RootResourceId
      PathPart: create
      RestApiId: !Ref TaskAPIGateway

  CreateTaskMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref TaskAPIGateway
      ResourceId: !Ref CreateTaskResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateTaskLambda.Arn}/invocations"

  ReadTaskResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt TaskAPIGateway.RootResourceId
      PathPart: read
      RestApiId: !Ref TaskAPIGateway

  ReadTaskMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref TaskAPIGateway
      ResourceId: !Ref ReadTaskResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: GET
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ReadTaskLambda.Arn}/invocations"

  UpdateTaskResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt TaskAPIGateway.RootResourceId
      PathPart: update
      RestApiId: !Ref TaskAPIGateway

  UpdateTaskMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref TaskAPIGateway
      ResourceId: !Ref UpdateTaskResource
      HttpMethod: PUT
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: PUT
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UpdateTaskLambda.Arn}/invocations"

  DeleteTaskResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt TaskAPIGateway.RootResourceId
      PathPart: delete
      RestApiId: !Ref TaskAPIGateway

  DeleteTaskMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref TaskAPIGateway
      ResourceId: !Ref DeleteTaskResource
      HttpMethod: DELETE
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: DELETE
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DeleteTaskLambda.Arn}/invocations"

  # DynamoDB Table
  TasksTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: keynotes-tasks
      AttributeDefinitions:
        - AttributeName: taskID
          AttributeType: S
      KeySchema:
        - AttributeName: taskID
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  # SNS Topic
  TaskSNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: keynotesnotifs

  # Cognito User Pool
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: KeynotesUserPool

  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref CognitoUserPool
      ClientName: KeynotesClient

Outputs:
  APIGatewayURL:
    Description: "API Gateway endpoint URL"
    Value: !Sub "https://${TaskAPIGateway}.execute-api.${AWS::Region}.amazonaws.com"

  LoadBalancerDNS:
    Description: "DNS Name for the Load Balancer"
    Value: !GetAtt AppLoadBalancer.DNSName

  CognitoPoolID:
    Description: "User Pool ID for Cognito"
    Value: !Ref CognitoUserPool

  CognitoClientID:
    Description: "Cognito App Client ID"
    Value: !Ref CognitoUserPoolClient

  DynamoDBTableName:
    Description: "DynamoDB Table Name"
    Value: !Ref TasksTable

  SNSTopicARN:
    Description: "SNS Topic ARN"
    Value: !Ref TaskSNSTopic
